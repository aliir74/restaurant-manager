# Generated by Django 4.0.3 on 2022-04-08 15:01
import json
import os.path
from datetime import datetime
from django.db import migrations
from django.utils.timezone import make_aware
from restaurantManager.models.business_hour import BusinessHours


# TODO: check all data inserted correctly (specifically null values in json)


def get_necessary_models(apps):
    User = apps.get_model('restaurantManager', 'User')
    Restaurant = apps.get_model('restaurantManager', 'Restaurant')
    Review = apps.get_model('restaurantManager', 'Review')
    Category = apps.get_model('restaurantManager', 'Category')
    BusinessHour = apps.get_model('restaurantManager', 'BusinessHours')
    return User, Restaurant, Review, Category, BusinessHour


class ReadFiles:
    restaurants_file = None
    reviews_file = None
    users_file = None

    @classmethod
    def open_files(cls):
        base_dir = '/opt/seed_data'
        cls.restaurants_file = open(os.path.join(base_dir, "restaurants.jsonl"))

        cls.reviews_file = open(os.path.join(base_dir, "reviews.jsonl"))

        cls.users_file = open(os.path.join(base_dir, "users.jsonl"))

    @classmethod
    def load_data(cls):
        cls.open_files()

        restaurants_data = (json.loads(line) for line in cls.restaurants_file)
        reviews_data = (json.loads(line) for line in cls.reviews_file)
        users_data = (json.loads(line) for line in cls.users_file)

        return restaurants_data, reviews_data, users_data

    @classmethod
    def close_files(cls):
        cls.restaurants_file.close()
        cls.reviews_file.close()
        cls.users_file.close()


class DoMigration:

    @staticmethod
    def create_users(UserModel, users_data):
        for user in users_data:
            UserModel.objects.create(username=user['user_id'], user_id=user['user_id'], name=user['name'],
                                     useful=int(user.get('useful')), average_stars=float(user.get('average_stars')))

    @staticmethod
    def create_restaurants(RestaurantModel, restaurants_data, CategoryModel, BusinessHourModel):
        created_categories = {}
        for restaurant in restaurants_data:
            restaurant_object = RestaurantModel.objects. \
                create(business_id=restaurant['business_id'], name=restaurant['name'],
                       address=restaurant.get('address'), city=restaurant.get('city'),
                       state=restaurant.get('state'), postal_code=restaurant.get('postal_code'),
                       latitude=float(restaurant.get('latitude')), longitude=float(restaurant.get('longitude')),
                       stars=float(restaurant.get('stars', 0)), review_cnt=int(restaurant.get('review_count', 0)),
                       is_open=bool(restaurant.get('is_open', 0)),
                       attributes=restaurant.get('attributes', {}))  # TODO: check attributes json field (inner fields)
            restaurant_category_names = [r for r in restaurant.get('categories').split(', ')]
            for category in restaurant_category_names:
                if category not in created_categories:
                    created_categories[category] = CategoryModel.objects.create(name=category)
                restaurant_object.categories.add(created_categories[category])
            restaurant_hours = restaurant.get('hours')
            restaurant_hours = {} if restaurant_hours is None else restaurant_hours
            for day in restaurant_hours.keys():
                open_time, close_time = restaurant_hours[day].split('-')
                open_time, close_time = datetime.strptime(open_time, "%H:%M").time(), \
                    datetime.strptime(close_time, "%H:%M").time()
                BusinessHourModel.objects.create(restaurant=restaurant_object,
                                                 day=getattr(BusinessHours.Days, day[:3]), open_time=open_time,
                                                 close_time=close_time)

    @staticmethod
    def create_reviews(ReviewModel, reviews_data, UserModel, RestaurantModel):
        for review in reviews_data:
            user = UserModel.objects.get(user_id=review['user_id'])
            restaurant = RestaurantModel.objects.get(business_id=review['business_id'])
            ReviewModel.objects.create(review_id=review['review_id'], user=user, restaurant=restaurant,
                                       stars=float(review.get('stars', 0)), useful=int(review.get('useful', 0)),
                                       funny=int(review.get('funny', 0)),
                                       cool=int(review.get('cool', 0)), text=review['text'],
                                       publish_date=make_aware(
                                           datetime.strptime(review.get('date'), "%Y-%m-%d %H:%M:%S")))
            # Use make_aware to add timezone to datetime object

    @staticmethod
    def run(apps, schema_editor):
        restaurants, reviews, users = ReadFiles.load_data()
        User, Restaurant, Review, Category, BusinessHour = get_necessary_models(apps)

        # TODO: Bulk insert?
        # Order of creation matters
        DoMigration.create_users(User, users)
        DoMigration.create_restaurants(Restaurant, restaurants, Category, BusinessHour)
        DoMigration.create_reviews(Review, reviews, User, Restaurant)


class RevertMigration:

    @staticmethod
    def delete_reviews(ReviewModel, reviews):
        for review in reviews:
            ReviewModel.objects.filter(review['review_id']).delete()

    @staticmethod
    def delete_restaurants(RestaurantModel, restaurants):
        for restaurant in restaurants:
            RestaurantModel.objects.filter(restaurant['business_id']).delete()

    @staticmethod
    def delete_users(UserModel, users):
        for user in users:
            UserModel.objects.filter(user['user_id']).delete()

    @staticmethod
    def run(apps, schema_editor):
        restaurants, reviews, users = ReadFiles.load_data()
        User, Restaurant, Review, Category, BusinessHour = get_necessary_models(apps)

        # TODO: bulk delete?
        RevertMigration.delete_reviews(Review, reviews)
        RevertMigration.delete_restaurants(Restaurant, restaurants)
        RevertMigration.delete_users(User, users)


class Migration(migrations.Migration):
    dependencies = [
        ('restaurantManager', '0006_alter_review_text'),
    ]

    operations = [
        migrations.RunPython(DoMigration.run, reverse_code=RevertMigration.run),
    ]
